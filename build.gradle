plugins {
    id 'java'
    id 'maven-publish'
}
//
group 'media.hiway'
version '1.1.0'
java.sourceCompatibility = JavaVersion.VERSION_11
//
ext {
    keycloakVersion = '22.0.1'
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly "org.keycloak:keycloak-core:$keycloakVersion"
    compileOnly "org.keycloak:keycloak-server-spi:$keycloakVersion"
    compileOnly "org.keycloak:keycloak-server-spi-private:$keycloakVersion"
    compileOnly "org.keycloak:keycloak-services:$keycloakVersion"

    testImplementation "org.keycloak:keycloak-services:$keycloakVersion"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
}

// Load the environment property from the command line
def env = project.hasProperty('env') ? project.getProperty('env') : 'prod'

// Define the properties file to load based on the environment
def propertiesFile = file("config-${env}.properties")

// Check if the properties file exists and load it
if (propertiesFile.exists()) {
    println "Loading properties from ${propertiesFile.name}"
    propertiesFile.withInputStream { stream ->
        Properties props = new Properties()
        props.load(stream)
        props.each { key, value ->
            project.ext.set(key, value)
        }
    }
} else {
    throw new GradleException("Properties file for environment '${env}' not found: ${propertiesFile.name}")
}

// Define tasks to create JARs with custom names based on the environment
task jarDev(type: Jar) {
    archiveBaseName.set('druid-social-identity-provider-dev')
    archiveVersion.set(version)
    from sourceSets.main.output
    // Include the development properties file
    from('config-dev.properties') {
        into('config')
    }
}

task jarProd(type: Jar) {
    archiveBaseName.set('druid-social-identity-provider-prod')
    archiveVersion.set(version)
    from sourceSets.main.output
    // Include the production properties file
    from('config-prod.properties') {
        into('config')
    }
}

// Define build task to depend on specific jar task based on the environment
task buildDev {
    dependsOn jarDev
}

task buildProd {
    dependsOn jarProd
}

// Default build task
build {
    dependsOn buildProd // Change to buildProd for production by default if needed
}

test {
    useJUnitPlatform()
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

// run 'gradle wrapper' to regenerate gradle/ folder
wrapper {
    gradleVersion = "8.0.2"
    distributionType = Wrapper.DistributionType.BIN
}